<?php
/**
 * @file
 * Code for the EF Commerce feature.
 */

include_once 'ef_commerce.features.inc';

/**
 * @file
 * Module file for EF Commerce.
 */

/**
 * Implements hook_commerce_checkout_pane_info_alter().
 */
function ef_commerce_commerce_checkout_pane_info_alter(&$checkout_panes) {
  // Donation pane.
  $checkout_panes['checkout_donate']['page'] = 'checkout';
  $checkout_panes['checkout_donate']['weight'] = 20;
  $checkout_panes['checkout_donate']['enabled'] = TRUE;

  // Account.
  $checkout_panes['account']['page'] = 'checkout';
  $checkout_panes['account']['enabled'] = TRUE;

  // Billing.
  $checkout_panes['customer_profile_billing']['page'] = 'disabled';
  $checkout_panes['customer_profile_billing']['enabled'] = FALSE;

  // Move Review.
  $checkout_panes['checkout_review']['enabled'] = FALSE;
  $checkout_panes['checkout_review']['page'] = 'disabled';
}

function ef_commerce_form_commerce_checkout_form_alter(&$form, &$form_state, $form_id) {
  // Create wrapper
  /** @var EntityDrupalWrapper $order_wrapper */
  $order_wrapper = entity_metadata_wrapper('commerce_order', $form_state['order']);

  if (isset($form['account'])) {
    $pane_alter = TRUE;

    // Check if the order's billing profile has been attached.
    if (!$order_wrapper->{'commerce_customer_billing'}->value()) {
      $customer_profile = _ef_users_get_customer_profile(user_load($order_wrapper->uid->value()));

      // If a profile was returned, set it.
      if ($customer_profile) {
        $order_wrapper->{'commerce_customer_billing'}->set($customer_profile->profile_id);
        $order_wrapper->save();
      }
      // No profile returned, throw notice
      else {
        drupal_set_message(t('You must enter your address in your !link to continue.', array('!link' => l(t('profile'), 'user/' . $order_wrapper->uid->value() . '/edit-profile', array('query' => array('destination' => request_path()))))), 'warning');
        $form['buttons']['continue']['#disabled'] = TRUE;
        $pane_alter = FALSE;
      }
    }

    // If we're good to alter, do it.
    if ($pane_alter) {
      // Load up addressfield
      $commerce_customer_address = $order_wrapper->commerce_customer_billing->commerce_customer_address->value();

      $addressfield_handlers = array('address');
      $addressfield_context = array(
        'mode' => 'render',
      );
      $addressfield_render = addressfield_generate($commerce_customer_address, $addressfield_handlers, $addressfield_context);

      // For some reason couldn't get the title to set if I set the $addressfield_render
      // as the rendered item.
      $form['account']['billing'] = array(
        '#type' => 'item',
        '#title' => t('Address'),
        '#markup' => drupal_render($addressfield_render),
      );

      $form['account']['edit_account'] = array(
        '#type' => 'item',
        '#title' => '',
        '#markup' => l(
          t('Edit my contact information'),
          'user/' . $order_wrapper->uid->value() . '/edit-profile',
          array(
            'query' => array('destination' => request_path())
          )
        ),
      );
    }
  }
  if (isset($form['checkout_donate'])) {
    $user_wrapper = entity_metadata_wrapper('user', $order_wrapper->uid->value());

    $form['checkout_donate']['cpr_number'] = array(
      '#type' => 'textfield',
      '#title' => t('Get membership of our fund'),
      '#description' => t('Get membership by writing your social security number. The number will be sent encrypted and is stored on a secured server.'),
      '#default_value' => '',
      '#weight' => 50,
    );

    try {
      $form['checkout_donate']['cpr_number']['#default_value'] = $user_wrapper->field_cpr_number->value();
    }
    catch (EntityMetadataWrapperException $e) {
      // Nothing.
    }
    $form['buttons']['continue']['#submit'][] = 'ef_commerce_checkout_save_cpr_number';
  }
}

/**
 * Submit callback to save CPR number to user.
 *
 * @param $form
 * @param $form_state
 */
function ef_commerce_checkout_save_cpr_number($form, &$form_state) {
  if ($form_state['values']['checkout_donate']['cpr_number']) {
    /** @var EntityDrupalWrapper $user_wrapper */
    $user_wrapper = entity_metadata_wrapper('user', $form_state['order']->uid);
    try {
      $user_wrapper->field_cpr_number = $form_state['values']['checkout_donate']['cpr_number'];
      $user_wrapper->save();
    }
    catch (EntityMetadataWrapperException $e) {
      // Nothing.
    }
  }
}

/**
 * Implements hook_commerce_order_insert().
 */
function ef_commerce_commerce_order_insert($order) {
  // Reload, we do not want stale (just in case.)
  $order = commerce_order_load($order->order_id);
  $order_wrapper = entity_metadata_wrapper('commerce_order', $order);

  if (!$order_wrapper->commerce_customer_billing->value()) {
    // Attach the user's profile to the order
    $commerce_customer_profile = _ef_users_get_customer_profile(user_load($order_wrapper->uid->value()));
    // Verify it exists
    if ($commerce_customer_profile) {
      // Set the field reference.
      $order_wrapper->commerce_customer_billing->set($commerce_customer_profile->profile_id);
      $order_wrapper->save();
    }
    // If it doesn't exist, let user know they need to save their profile.
    else {
      drupal_set_message(t('You have not yet filled out your address in your !link.', array('!link' => l(t('profile'), 'user/' . $order_wrapper->uid->value() . '/edit-profile', array('query' => array('destination' => request_path()))))), 'warning');
    }
  }
}

function ef_commerce_commerce_checkout_complete($order) {
  // Order has a payment method, and is QuickPay for automatic captures.
  if (isset($order->data['payment_method']) && $order->data['payment_method'] == 'quickpay|commerce_payment_quickpay') {
    // Load the transaction that just occured.
    $payments = commerce_payment_transaction_load_multiple(array(), array('order_id' =>  $order->order_id));
    $transaction = !empty($payments) ? array_shift($payments) : NULL;
    if (!$transaction) {
      // Error?!
      return FALSE;
    }

    // Sub out a few things so we can invoke existing methods.
    $form_state_stub = array(
      'order' => $order,
      'transaction' => $transaction,
      'payment_method' => commerce_payment_method_instance_load($order->data['payment_method']),
      'values' => array(
        'finalize' => 1,
      ),
    );

    $qp = new Quickpay($form_state_stub['payment_method']['settings']);
    $txn = $qp->transaction($transaction->remote_id);
    // Calculate how much is left of the authorization (we might have partially
    // captured it).
    $txn_amount = Quickpay::wire_amount($txn->balance(), $txn->currency());

    $balance = commerce_payment_order_balance($order);

    if ($balance['amount'] > 0 && $balance['amount'] < $txn_amount) {
      $default_amount = $balance['amount'];
    }
    else {
      $default_amount = $txn_amount;
    }

    // Convert the price amount to a user friendly decimal value.
    $default_amount = commerce_currency_amount_to_decimal($default_amount, $transaction->currency_code);
    $form_state_stub['values']['amount'] = $default_amount;

    commerce_quickpay_transaction_capture_form_submit(array(), $form_state_stub);
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function ef_commerce_form_edit_profile_user_profile_form_alter(&$form, &$form_state, $form_id) {
  if (isset($form['field_cpr_number'])) {
    // @note: At any point should this be viewable and editable by someone?
    $form['field_cpr_number']['#access'] = user_access('administer modules');
  }
}
